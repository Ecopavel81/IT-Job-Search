from telethon import TelegramClient
from telethon.tl.functions.messages import GetHistoryRequest
from typing import List
import re
import os
from datetime import datetime, timedelta
from models import Job

class TelegramParser:
    def __init__(self):
        # –ü–æ–ª—É—á–∞–µ–º credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.api_id = os.getenv('TELEGRAM_API_ID')
        self.api_hash = os.getenv('TELEGRAM_API_HASH')
        self.phone = os.getenv('TELEGRAM_PHONE')
        
        self.client = None
        self.keywords = [
            'ml engineer', 'machine learning', 'data scientist',
            'ai developer', 'artificial intelligence', 'deep learning'
        ]
        self.priority_locations = ['dubai', 'canada', 'ireland', 'serbia']
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
        if not self.client:
            self.client = TelegramClient('session', self.api_id, self.api_hash)
            await self.client.start(phone=self.phone)
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Telegram")
    
    async def parse_channel(self, channel_username: str) -> List[Job]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ Telegram"""
        await self.connect()
        
        jobs = []
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞
            entity = await self.client.get_entity(channel_username)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            offset_date = datetime.now() - timedelta(days=7)
            
            messages = await self.client(GetHistoryRequest(
                peer=entity,
                offset_id=0,
                offset_date=offset_date,
                add_offset=0,
                limit=100,
                max_id=0,
                min_id=0,
                hash=0
            ))
            
            for message in messages.messages:
                if not message.message:
                    continue
                
                text = message.message.lower()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                if any(keyword in text for keyword in self.keywords):
                    job = self._parse_job_from_text(
                        message.message, 
                        channel_username,
                        message.date
                    )
                    if job:
                        jobs.append(job)
            
            print(f"üìä –ö–∞–Ω–∞–ª {channel_username}: –Ω–∞–π–¥–µ–Ω–æ {len(jobs)} –≤–∞–∫–∞–Ω—Å–∏–π")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞ {channel_username}: {e}")
        
        return jobs
    
    def _parse_job_from_text(self, text: str, source: str, date: datetime) -> Job:
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç)
            lines = text.split('\n')
            title = self._extract_title(lines)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é
            company = self._extract_company(text)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ª–æ–∫–∞—Ü–∏—é
            location = self._extract_location(text)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
            experience = self._extract_experience(text)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É
            salary = self._extract_salary(text)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫)
            description = self._extract_description(lines)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–≥–∏/–Ω–∞–≤—ã–∫–∏
            tags = self._extract_tags(text)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
            contact_email = self._extract_email(text)
            contact_telegram = self._extract_telegram(text)
            
            if not title or not company:
                return None
            
            return Job(
                title=title,
                company=company,
                location=location or "Remote",
                experience=experience or "2-3 years",
                salary=salary or "Competitive",
                description=description,
                tags=tags,
                source=f"t.me/{source}",
                posted_date=date.strftime('%Y-%m-%d'),
                contact_email=contact_email or f"jobs@{company.lower().replace(' ', '')}.com",
                contact_telegram=contact_telegram or f"@{source}"
            )
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞: {e}")
            return None
    
    def _extract_title(self, lines: List[str]) -> str:
        """–ò–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –ø–æ–∑–∏—Ü–∏–π
        position_keywords = ['engineer', 'developer', 'scientist', 'analyst']
        
        for line in lines[:5]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫
            line_lower = line.lower()
            if any(keyword in line_lower for keyword in position_keywords):
                # –û—á–∏—â–∞–µ–º –æ—Ç —ç–º–æ–¥–∑–∏ –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                clean_line = re.sub(r'[^\w\s-]', '', line).strip()
                if len(clean_line) > 5:
                    return clean_line[:100]
        
        return lines[0][:100] if lines else "Unknown Position"
    
    def _extract_company(self, text: str) -> str:
        """–ò–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"""
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏
        patterns = [
            r'[Cc]ompany[:\s]+([A-Z][A-Za-z0-9\s&]+)',
            r'[–ö–∫]–æ–º–ø–∞–Ω–∏—è[:\s]+([–ê-–ØA-Z][–ê-–Ø–∞-—èA-Za-z0-9\s&]+)',
            r'@([A-Za-z0-9_]+)',  # Telegram username
        ]
        
        for pattern in patterns:
            match = re.search(pattern, text)
            if match:
                return match.group(1).strip()[:100]
        
        return "Unknown Company"
    
    def _extract_location(self, text: str) -> str:
        """–ò–∑–≤–ª–µ—á—å –ª–æ–∫–∞—Ü–∏—é"""
        text_lower = text.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏
        for location in self.priority_locations:
            if location in text_lower:
                return location.capitalize()
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –ª–æ–∫–∞—Ü–∏–π
        location_patterns = [
            r'[Ll]ocation[:\s]+([A-Za-z\s,]+)',
            r'[–õ–ª]–æ–∫–∞—Ü–∏—è[:\s]+([–ê-–Ø–∞-—èA-Za-z\s,]+)',
            r'üåç\s*([A-Za-z\s,]+)',
        ]
        
        for pattern in location_patterns:
            match = re.search(pattern, text)
            if match:
                return match.group(1).strip()[:50]
        
        return None
    
    def _extract_experience(self, text: str) -> str:
        """–ò–∑–≤–ª–µ—á—å —Ç—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç"""
        patterns = [
            r'(\d+[-‚Äì]\d+)\s*(?:years?|–ª–µ—Ç)',
            r'(?:experience|–æ–ø—ã—Ç)[:\s]+(\d+[-‚Äì]\d+)',
            r'(\d+\+)\s*(?:years?|–ª–µ—Ç)',
        ]
        
        for pattern in patterns:
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                return match.group(1) + " years"
        
        return None
    
    def _extract_salary(self, text: str) -> str:
        """–ò–∑–≤–ª–µ—á—å –∑–∞—Ä–ø–ª–∞—Ç—É"""
        patterns = [
            r'([\$‚Ç¨¬£]\d+[kK]?[-‚Äì]\d+[kK]?)',
            r'(\d+[kK]?[-‚Äì]\d+[kK]?\s*(?:USD|EUR|GBP|CAD))',
            r'[Ss]alary[:\s]+([\$‚Ç¨¬£]\d+[kK]?[-‚Äì]\d+[kK]?)',
        ]
        
        for pattern in patterns:
            match = re.search(pattern, text)
            if match:
                return match.group(1)
        
        return None
    
    def _extract_description(self, lines: List[str]) -> str:
        """–ò–∑–≤–ª–µ—á—å –æ–ø–∏—Å–∞–Ω–∏–µ"""
        # –ë–µ—Ä—ë–º —Å—Ç—Ä–æ–∫–∏ —Å–æ 2-–π –ø–æ 5-—é, –æ–±—ä–µ–¥–∏–Ω—è–µ–º
        description_lines = [line for line in lines[1:6] if len(line) > 20]
        description = ' '.join(description_lines)
        return description[:500] if description else "No description available"
    
    def _extract_tags(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏/–Ω–∞–≤—ã–∫–∏"""
        # –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
        tech_keywords = [
            'python', 'pytorch', 'tensorflow', 'keras', 'scikit-learn',
            'r', 'sql', 'nosql', 'docker', 'kubernetes', 'aws', 'azure',
            'gcp', 'spark', 'hadoop', 'nlp', 'computer vision', 'mlops',
            'git', 'linux', 'tableau', 'power bi', 'airflow'
        ]
        
        text_lower = text.lower()
        found_tags = []
        
        for keyword in tech_keywords:
            if keyword in text_lower:
                found_tags.append(keyword.title())
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 6 —Ç–µ–≥–æ–≤
        return found_tags[:6] if found_tags else ['Python', 'Machine Learning']
    
    def _extract_email(self, text: str) -> str:
        """–ò–∑–≤–ª–µ—á—å email"""
        pattern = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}'
        match = re.search(pattern, text)
        return match.group(0) if match else None
    
    def _extract_telegram(self, text: str) -> str:
        """–ò–∑–≤–ª–µ—á—å Telegram username"""
        pattern = r'@([a-zA-Z0-9_]{5,32})'
        matches = re.findall(pattern, text)
        return f"@{matches[0]}" if matches else None
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        if self.client:
            await self.client.disconnect()
            print("üëã –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç Telegram")