from fastapi import FastAPI, HTTPException, UploadFile, File, Form
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from typing import List, Optional
import uvicorn
from datetime import datetime
import asyncio

from database import Database
from telegram_parser import TelegramParser
from email_service import EmailService
from models import Job, Application, JobFilter

app = FastAPI(title="Job Search System API")

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
db = Database()
telegram_parser = TelegramParser()
email_service = EmailService()

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
async def parse_telegram_channels():
    """–ü–∞—Ä—Å–∏–Ω–≥ Telegram –∫–∞–Ω–∞–ª–æ–≤ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ª–∏ Telegram credentials
    if not telegram_parser.api_id or not telegram_parser.api_hash or not telegram_parser.phone:
        print("‚ö†Ô∏è Telegram credentials –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω.")
        print("   –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ TELEGRAM_API_ID, TELEGRAM_API_HASH –∏ TELEGRAM_PHONE –≤ .env")
        return
    
    while True:
        try:
            print("üîç –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ Telegram –∫–∞–Ω–∞–ª–æ–≤...")
            channels = [
                "revacancy_global",
                "datasciencejobs"
            ]
            
            for channel in channels:
                jobs = await telegram_parser.parse_channel(channel)
                for job in jobs:
                    await db.add_job(job)
                print(f"‚úÖ –ö–∞–Ω–∞–ª {channel}: –Ω–∞–π–¥–µ–Ω–æ {len(jobs)} –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π")
            
            await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            await asyncio.sleep(60)

@app.on_event("startup")
async def startup_event():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    await db.init_db()
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø–∞—Ä—Å–∏–Ω–≥–∞
    asyncio.create_task(parse_telegram_channels())
    print("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")

@app.get("/")
async def root():
    return {"message": "Job Search System API", "status": "running"}

@app.get("/api/jobs", response_model=List[Job])
async def get_jobs(
    search: Optional[str] = None,
    location: Optional[str] = None,
    position: Optional[str] = None,
    limit: int = 50
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
    try:
        filters = JobFilter(
            search=search,
            location=location,
            position=position
        )
        jobs = await db.get_jobs(filters, limit)
        return jobs
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/jobs/{job_id}", response_model=Job)
async def get_job(job_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é"""
    job = await db.get_job_by_id(job_id)
    if not job:
        raise HTTPException(status_code=404, detail="–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    return job

@app.post("/api/applications")
async def create_application(
    job_id: int = Form(...),
    name: str = Form(...),
    email: str = Form(...),
    phone: str = Form(None),
    message: str = Form(...),
    resume: UploadFile = File(...)
):
    """–°–æ–∑–¥–∞—Ç—å –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
        job = await db.get_job_by_id(job_id)
        if not job:
            raise HTTPException(status_code=404, detail="–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if not resume.filename.endswith('.pdf'):
            raise HTTPException(status_code=400, detail="–¢–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—é–º–µ
        resume_content = await resume.read()
        resume_path = f"uploads/resumes/{job_id}_{datetime.now().timestamp()}_{resume.filename}"
        
        with open(resume_path, "wb") as f:
            f.write(resume_content)
        
        # –°–æ–∑–¥–∞—ë–º –æ—Ç–∫–ª–∏–∫
        application = Application(
            job_id=job_id,
            name=name,
            email=email,
            phone=phone,
            message=message,
            resume_path=resume_path,
            status="sent",
            applied_date=datetime.now()
        )
        
        application_id = await db.add_application(application)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é
        await email_service.send_application_email(
            job=job,
            application=application,
            resume_path=resume_path
        )
        
        return {
            "status": "success",
            "application_id": application_id,
            "message": "–û—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/applications", response_model=List[Application])
async def get_applications(user_email: Optional[str] = None):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–∫–ª–∏–∫–æ–≤"""
    try:
        applications = await db.get_applications(user_email)
        return applications
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/applications/{application_id}", response_model=Application)
async def get_application(application_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–∫–ª–∏–∫"""
    application = await db.get_application_by_id(application_id)
    if not application:
        raise HTTPException(status_code=404, detail="–û—Ç–∫–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return application

@app.put("/api/applications/{application_id}/status")
async def update_application_status(
    application_id: int,
    status: str
):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–∫–ª–∏–∫–∞"""
    try:
        success = await db.update_application_status(application_id, status)
        if not success:
            raise HTTPException(status_code=404, detail="–û—Ç–∫–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return {"status": "success", "message": "–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/parse/trigger")
async def trigger_parse():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ä—É—á–Ω—É—é"""
    try:
        asyncio.create_task(parse_telegram_channels())
        return {"status": "success", "message": "–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/stats")
async def get_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    try:
        stats = await db.get_stats()
        return stats
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)